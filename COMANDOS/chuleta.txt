╔════════════════════════════════════════╗
║             LOCAL - UBUNTU              				 ║
╠════════════════════════════════════════╣
║ Mes important												 ║
║ Enviar archivos al clúster:             				 ║
║   scp foobar.txt u213927@ohpc.s.upf.edu 				 ║
║                                         				 ║ 
║ Recibir archivos del clúster:           				 ║
║   scp u213927@ohpc.s.upf.edu:foobar.txt 				 ║
║   /mnt/c/User/janpr/Desktop/            				 ║
║                                         				 ║
║                                         				 ║
║ Ver archivos y directorios:             				 ║
║   ll                                    				 ║
║                                         				 ║
║ Acceder a un archivo (si no existe, lo  				 ║
║   creará):                              				 ║
║   vi name_of_file                       				 ║
╚════════════════════════════════════════╝

╔════════════════════════════════════════╗
║                CLUSTER                   			 ║
╠════════════════════════════════════════╣
║ Ver archivos y directorios:             				 ║
║   ls                                    				 ║
║                                         				 ║
║ Modificar un archivo:                   				 ║
║   vim ame_of_file                     				 ║
║                                         				 ║
╚════════════════════════════════════════╣

╔════════════════════════════════════════╗
║            TERMINAL AMBUDES             				 ║
╠════════════════════════════════════════╣
║ pwd - It stands for Print Working       				 ║
║       Directory and prints the current  				 ║
║       directory.                        				 ║
║                                        				 ║
║ mkdir dir name - It stands for Make     				 ║
║       Directory. Creates a new folder   				 ║
║       in the current directory. The     				 ║
║       option -p allows the creation    				 ║
║       of nested folders.                				 ║
║                                        				 ║
║ cd dir name - It stands for Change      				 ║
║       Directory and is used to move     				 ║
║       between folders. Use cd name of   				 ║
║       folder to move inside a folder   				 ║
║       and cd .. to move to the parent   				 ║
║       directory.                        				 ║
║                                        				 ║
║ touch file name - Creates a file.      				 ║
║                                        				 ║
║ ls - It stands for List. Lists all      				 ║
║      the contents in the current        			 	 ║
║      directory. Flag -a lists hidden    				 ║
║      directories. Flag -l gives extra   				 ║
║      information. These flags can be    				 ║
║      used together as -la.             				 ║
║                                        				 ║
║ clear - Clears terminal.                				 ║
║                                        				 ║
║ mv foo bar/ - It stands for Move.       				 ║
║      Allows files and folders to be     				 ║	
║      moved from one directory to        				 ║
║      another. In this example, move     			 	 ║
║      file or folder foo inside folder  				 ║
║      bar. It also allows renaming      				 ║
║      files and folders. mv foo bar     				 ║
║      renames file or folder foo to     				 ║
║      bar. To use recursively, to make  				 ║
║      the command also move directories 				 ║
║      and files inside a folder, use    				 ║
║      flag -r.                           				 ║
║                                        				 ║
║ cp foo bar - It stands for Copy. It     				 ║
║      allows copying a file or folder.   			 	 ║	
║      In this case, it makes a copy of  				 ║
║      foo in bar. To use recursively,   				 ║
║      use flag -r.                      				 ║
║                                        				 ║
║ rm name of file - It stands for Remove. 				 ║
║      Deletes PERMANENTLY a file or      				 ║
║      empty folder. To use recursively,  			  	 ║
║      use flag -r. To force, use flag   				 ║
║      -f.                               				 ║
║                                        				 ║
║ lscpu - Shows information of the CPU.  				 ║
║                                        				 ║
║ du - It stands for disk usage. Returns 				 ║
║      the size of files and folders in  				 ║
║      the current directory.             				 ║
║                                        				 ║
║ cat name of file - It stands for       				 ║
║      Concatenate. It prints the        				 ║
║      content of a file to stdout.      				 ║
║                                        				 ║
║ man name of command - It stands for    				 ║
║      Manual. It prints the user manual 				 ║
║      for a command.                    				 ║
║                                        				 ║
║ echo - prints a text or the content of 				 ║
║      a variable. E. g. echo $PATH,     				 ║
║      echo $SLURM JOB NUM NODES.        				 ║
╚════════════════════════════════════════╝

╔════════════════════════════════════════╗
║                   VIM                    			 ║
╠════════════════════════════════════════╣
║ Mes importants                          				 ║
║ :q - per tancar el fitxer.              				 ║
║        									    				 ║
║ :q! - si hi ha canvis que no vols       				 ║
║       desar.                            				 ║
║ :w - per desar els canvis en un fitxer. 				 ║
║        									    				 ║
║ :wq - combina ambdues comandes.         				 ║
║        									    				 ║
║ :sav file - per desar el fitxer amb un  				 ║
║       nom nou.                          				 ║
║                                        				 ║
║ Menys importants                       				 ║
║        									    				 ║
║ G - per moure't al final del fitxer.   				 ║
║        									    				 ║
║ gg - per moure't al principi del      				 ║
║      fitxer.                           				 ║
║        									    				 ║
║ :80 - per moure't a la línia 80.      				 ║
║        									    				 ║
║ y - per copiar el text seleccionat.    				 ║
║        									    				 ║
║ p - per enganxar el text seleccionat.  				 ║
║        									    				 ║
║ dd - per tallar una línia.             				 ║
║        									    				 ║
║ yy - per copiar la línia actual.       				 ║
║        									    				 ║
║ u - per desfer l'últim canvi.         				 ║
║        									    				 ║
║ ctrl+r - per refer l'últim canvi.     				 ║
║        									    				 ║
║ /foo - cerca l'aparició següent de la  				 ║
║        cadena foo al fitxer, començant				 ║
║        des de la posició del cursor   				 ║
║        cap avall.                      				 ║
║        									    				 ║
║        									    				 ║
║ ?foo - cerca l'aparició següent de la  				 ║
║        cadena foo al fitxer, començant				 ║
║        des de la posició del cursor   				 ║
║        cap amunt.                      				 ║
║        									    				 ║
║ * - cerca el text sota el cursor.     				 ║
║        									    				 ║
║ :%s/foo/bar/gic - reemplaça totes les 				 ║
║        aparicions de foo amb bar. Les 				 ║
║        tecles finals g, i, c són       				 ║
║        opcionals per definir un canvi 				 ║
║        de fitxer global (si no està    				 ║
║        definit, els canvis s'apliquen  				 ║
║        només a les aparicions de la   				 ║
║        línia), per definir la          				 ║
║        insensibilitat a la casella del				 ║
║        canvis i per demanar           				 ║
║        confirmació, respectivament.    				 ║
║        									    				 ║
║        Mode visual: Permet seleccionar				 ║
║        un fragment de text. S'accedeix				 ║
║        des del mode normal prement:   				 ║
║        - v per al mode visual simple. 				 ║
║          Un cop aquí, mou-te pel      				 ║
║          fitxer usant les fletxes per 				 ║
║          seleccionar text.            				 ║
║        - V per al mode visual per     				 ║
║          seleccionar files completes. 				 ║
║        - ctrl+v per al mode visual per				 ║
║          seleccionar blocs de text.   				 ║
╚════════════════════════════════════════╝

╔════════════════════════════════════════╗
║             BATCH - FILE.SH              			 ║
╠════════════════════════════════════════╣
║ La sintaxi sbatch és la següent:         			 ║
║   #SBATCH --directive=value                			 ║
║   #SBATCH -short-directive value           			 ║
║                                         			 	 ║
║ - Per especificar la quantitat de temps que vols 	 ║
║   #SBATCH --time=DD-HH:MM:SS               			 ║
║                                         			 	 ║
║ - Per especificar el nombre de nodes    			 	 ║
║   #SBATCH --nodes=nombre                   			 ║
║   #SBATCH -N nombre                        			 ║
║                                         			 	 ║
║ - Per especificar el nombre de processos a iniciar	 ║
║   NOTA: Per a SLURM process=task.      			 	 ║
║   		Màxim d'1 tasca per nucli.       			 	 ║
║   #SBATCH --ntasks=nombre                  			 ║
║                                         			 	 ║
║ - Per especificar el nombre de nuclis   			 	 ║
║   per procés. Nota per a SLURM CPU=    			 	 ║
║   core.                                 			 	 ║
║   #SBATCH --cpus-per-task=nombre           			 ║
║                                         			 	 ║
║ - Per especificar el nombre de processos per node	 ║
║   #SBATCH --tasks-per-node=nombre          			 ║
║   #SBATCH -n nombre                        			 ║
║                                         			 	 ║
║ - Per especificar el nom de la feina.   			 	 ║
║   #SBATCH -J nom_de_la_feina               			 ║
║                                         			 	 ║
║ - Per especificar la partició.          			 	 ║
║   #SBATCH -p ippd-cpu                      			 ║
║                                         			 	 ║
║ - Per enviar una feina al sistema de cues:	      	 ║
║   $ sbatch myjob.sh                    			 	 ║
║                                         			 	 ║
║ - Per comprovar l'estat de totes les feines		 	 ║
║   al clúster, executeu la comanda:        		 	 ║
║   $ squeue                              			 	 ║
║                                         			 	 ║
║ - Per comprovar només l'estat de les      		 	 ║
║   execucions que heu iniciat:           			 	 ║
║ 	 $ squeue -u USUARI                    			 	 ║
║                                                     ║
║ - imprimir                                          ║
║   echo                                              ║
╚════════════════════════════════════════╝

╔════════════════════════════════════════╗
║               		MODULES                   			 ║
╠════════════════════════════════════════╣
║ - Aquests es poden llistar executant els   			 ║
║   següents comandaments:                   			 ║
║ 	 $ printenv                            			 	 ║
║ 	 $ env                                 			 	 ║
║                                         			 	 ║
║ - Per carregar qualsevol mòdul de la llista 			 ║
║   obtinguda per a usar-lo en el teu codi, 			 ║
║   afegeix en els teus fitxers de lot la    			 ║
║   següent línia abans de la línia         			 ║
║   d'execució:                             			 ║
║   $ module load nom_del_mòdul            			 ║
║                                         			 	 ║
║ - Per eliminar un mòdul carregat, utilitza: 			 ║
║   $ module unload nom_del_mòdul          			 ║
║                                         				 ║
║ - Per obtenir una llista de tots els      			 ║
║   mòduls carregats:                      		 	 ║
║   $ module list											 ║
╚════════════════════════════════════════╝


╔════════════════════════════════════════╗
║               COMPILACIÓ                 			 ║
╠════════════════════════════════════════╣
║ - Farem servir el compilador GCC.          			 ║
║   gcc main.c                              		 	 ║
║                                         			 	 ║
║ - gcc -Wall main.c -lm -o output         		 	 ║
║   -o, per donar nom a l'arxiu de sortida, 		 	 ║
║   o -l per enllaçar biblioteques.         		 	 ║
║   -Wall, que produeix advertències en cas 		 	 ║
║   que alguna part del codi es pugui     			 	 ║
║   millorar.                             			 	 ║
║   Per defecte, les biblioteques es busquen 			 ║
║   als directoris /usr/local/lib/ i /usr/lib/, 		 ║
║   de manera que si un codi requereix     		 	 ║
║   biblioteques externes, les seves rutes 			 ║
║   s'han d'introduir amb el flag -L.      			 ║
║   -I per a la ruta del fitxer de capçalera 			 ║
║   compila el fitxer main.c en un fitxer   			 ║
║   anomenat output                        			 ║
║   A més, es vincularà la biblioteca MATH (-lm)		 ║
╚════════════════════════════════════════╝


╔════════════════════════════════════════╗
║              			 MAKEFILE							                   ║
╠════════════════════════════════════════╣
║ target: prerequisites                  								   ║
║ <tab> recipe                          									   ║
║ El target no ha de ser necessàriament  						   ║
║ un fitxer; pot ser simplement el nom   						   ║
║ de la recepta. Aquests es diuen      							 ║
║ targets phony.                        									 ║
╚════════════════════════════════════════╝
